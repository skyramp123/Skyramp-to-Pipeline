// Generated by Skyramp v1.2.21 on 2025-09-18 23:07:20.962678 -0400 EDT m=+26623.149185668
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui-demo-typescript.spec.ts \
// 		--output-dir /Users/nkumar0101/Desktop/testing \
// 		--overwrite true \
// 		--playwright-trace /Users/nkumar0101/Desktop/testing/demo.zip \
// 		--rawTrace true \

// Import of required libraries
import { test } from '@playwright/test';
import { getValue, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 5000;

test('testUi', async ({ page }) => {
    test.setTimeout(121000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("https://demoshop.skyramp.dev/products");
    await page.getByRole("button", { name: "Add Product" }).click();
    await page.getByTestId("new_product_name").click();
    const playwrightRequest0: Record<string, any> = {
        "category": "Devices",
        "description": "Skyramp Ipad",
        "image_url": "images.google.com",
        "name": "Skypad",
        "price": 150
    };

    await page.getByTestId("new_product_name").fill(getValue(playwrightRequest0, "name"));
    await page.getByTestId("new_product_description").click();
    await page.getByTestId("new_product_description").fill(getValue(playwrightRequest0, "description"));
    await page.getByTestId("new_product_image_url").click();
    await page.getByTestId("new_product_image_url").fill(getValue(playwrightRequest0, "image_url"));
    await page.getByTestId("new_product_category").click();
    await page.getByTestId("new_product_category").fill(getValue(playwrightRequest0, "category"));
    await page.getByRole("combobox").click();
    await page.getByTestId("new_product_instock_yes").click();
    await page.getByTestId("new_product_price").click();
    await page.getByTestId("new_product_price").fill(getValue(playwrightRequest0, "price").toString());
    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise0 = page.waitForResponse("**/api/v1/products**");
    await page.getByRole("button", { name: "Submit" }).click();
    const response0 = await responsePromise0;

    await page.getByRole("button", { name: "Edit Product" }).click();
    await page.getByTestId("product-detail-input-price").click();
    const playwrightRequest1: Record<string, any> = {"price": 200};

    await page.getByTestId("product-detail-input-price").fill(getValue(playwrightRequest1, "price").toString());
    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise1 = page.waitForResponse("**/api/v1/products/**");
    await page.getByRole("button", { name: "Save Product" }).click();
    const response1 = await responsePromise1;

    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise2 = page.waitForResponse("**/api/v1/products/**");
    await page.getByRole("button", { name: "Delete Product" }).click();
    const response2 = await responsePromise2;
});
