// Generated by Skyramp v1.2.18 on 2025-09-11 18:34:10.502105 -0400 EDT m=+25981.742127918
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output-dir /Users/koljaheck/Documents/Professional/Skyramp/demoshop-ui \
// 		--overwrite true \
// 		--playwright-trace /Users/koljaheck/Documents/Professional/Skyramp/demoshop-ui/new_ui_test_playwright.zip \
// 		--rawTrace true

// Import of required libraries
import { test } from '@playwright/test';
import { expect, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

async function performLogin(page: any, email: string, password: string): Promise<void> {
    /**Handle login form interaction with credentials.*/
    await page.getByTestId("email").click();
    await page.getByTestId("email").fill(email);
    await page.getByTestId("email").press("Tab");
    await page.getByTestId("password").fill(password);
    // Wait to finish any potential hydration
    await page.waitForTimeout(1500);
    const responsePromise = page.waitForResponse("**/api/auth/login**");
    await page.getByRole("button", { name: "Log In" }).click();
    const response = await responsePromise;
    await page.waitForTimeout(2000);
}

async function uploadFile(page: any, filePath: string): Promise<void> {
    /**Handle file upload interaction.*/
    const responsePromise1 = page.waitForResponse("**/api/user/file/upload**");
    const fileUploadPromise = page.waitForEvent("filechooser");
    await page.getByRole("button", { name: "Upload Files" }).click();
    const fileChooser = await fileUploadPromise;
    await page.waitForTimeout(1500);
    await fileChooser.setFiles(filePath);
    const response1 = await responsePromise1;
}

async function sendChatMessage(page: any, message: string): Promise<void> {
    /**Handle sending a chat message.*/
    await page.getByRole("textbox", { name: "Ask about anything" }).click();
    await page.getByRole("textbox", { name: "Ask about anything" }).fill(message);
    await page.waitForTimeout(1500);
    const responsePromise = page.waitForResponse("**/api/assistant/create-thread**");
    await page.getByRole("button", { name: "Ask Valkai" }).click();
    const response = await responsePromise;
}

async function verifyDocumentAnalysisResults(page: any): Promise<void> {
    /**Verify that document analysis results are displayed correctly.*/
    await expect(page.locator("body")).toContainText("FDA_Deficiency_Letter_With_Tables.pdf");
    await expect(page.locator("body")).toContainText("The FDA issued a major deficiency letter for BioMed Solutions' NeuroGuide Implant System PMA");
}

test('testUi', async ({ page }) => {
    test.setTimeout(120000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    // Navigate to login page
    await page.goto("https://dev.valk.ai/auth/login?next=%2Fchat");
    
    // Perform user login
    await performLogin(page, "kolja@test.com", "Password123!");
    
    // Upload PDF document
    await uploadFile(page, "/Users/koljaheck/Documents/Professional/Skyramp/customers/case_studies/Valkai/FDA_Deficiency_Letter_With_Tables.pdf");
    
    // Verify file upload confirmation
    await expect(page.getByRole("article")).toContainText("FDA_Deficiency_Letter_With_Tables.pdf");
    
    // Send chat message requesting document summary
    await sendChatMessage(page, "Summarize this document in 1 sentence");
    
    // Verify document analysis results
    await verifyDocumentAnalysisResults(page);
});
